`timescale 1ns / 1ps

// n4fpga.v - Top level module for the ECE 544 Getting Started project
//
// Copyright Chetan Bornarkar, Portland State University, 2016
// 
// Created By:	Srivatsa Yogendra
// Modified By: Chetan Bornarkar
// Date:		23-December-2016
// Version:		1.0
//
// Description:
// ------------
// This module provides the top level for the embedded system proposed
// for ECE 544 project #3.  Assumes that a PmodENC is plugged into the JD expansion 
// port (bottom row), the motor input to JB and the Hall sensor input to JC. 
//
// NOTE:  You may have to modify this template for your implementation
//////////////////////////////////////////////////////////////////////
module n4fpga(
    input				clk,			// 100Mhz clock input
    input				btnC,			// center pushbutton
    input				btnU,			// UP (North) pusbhbutton
    input				btnL,			// LEFT (West) pushbutton
    input				btnD,			// DOWN (South) pushbutton  - used for system reset
    input				btnR,			// RIGHT (East) pushbutton
	input				btnCpuReset,	// CPU reset pushbutton
    input	[15:0]		sw,				// slide switches on Nexys 4
    output	[15:0] 		led,			// LEDs on Nexys 4   
    output              RGB1_Blue,      // RGB1 LED (LD16) 
    output              RGB1_Green,
    output              RGB1_Red,
    output              RGB2_Blue,      // RGB2 LED (LD17)
    output              RGB2_Green,
    output              RGB2_Red,
    output [7:0]        an,             // Seven Segment display
    output [6:0]        seg,
    output              dp,             // decimal point display on the seven segment 
    
    input				uart_rtl_rxd,	// USB UART Rx and Tx on Nexys 4
    output				uart_rtl_txd,	
    
	inout   [7:0]       JA,             // JA Pmod connector 
	                                    
    inout	[7:0] 		JB,				// JB Pmod connector 
                                       
    inout	[7:0] 		JC,				// JC Pmod connector 
										
	input	[7:0]		JD				// JD Pmod connector
);

// internal variables
// Clock and Reset 
wire				sysclk;              
wire				sysreset_n, sysreset;

// Rotary encoder 
wire				rotary_a, rotary_b, rotary_press, rotary_sw;

// GPIO pins 
wire	[31:0]	    gpio_in;				// embsys GPIO input port

// HB3 pins
wire                enable_pin, direction_pin; 
wire                hall_sensor_value_a, hall_sensor_value_b;

// Debug?
wire [7:0] 			led_debug_1,led_debug_2;

// OLED pins 
wire 				pmodoledrgb_out_pin1_i, pmodoledrgb_out_pin1_io, pmodoledrgb_out_pin1_o, pmodoledrgb_out_pin1_t; 
wire 				pmodoledrgb_out_pin2_i, pmodoledrgb_out_pin2_io, pmodoledrgb_out_pin2_o, pmodoledrgb_out_pin2_t; 
wire 				pmodoledrgb_out_pin3_i, pmodoledrgb_out_pin3_io, pmodoledrgb_out_pin3_o, pmodoledrgb_out_pin3_t; 
wire 				pmodoledrgb_out_pin4_i, pmodoledrgb_out_pin4_io, pmodoledrgb_out_pin4_o, pmodoledrgb_out_pin4_t; 
wire 				pmodoledrgb_out_pin7_i, pmodoledrgb_out_pin7_io, pmodoledrgb_out_pin7_o, pmodoledrgb_out_pin7_t; 
wire 				pmodoledrgb_out_pin8_i, pmodoledrgb_out_pin8_io, pmodoledrgb_out_pin8_o, pmodoledrgb_out_pin8_t; 
wire 				pmodoledrgb_out_pin9_i, pmodoledrgb_out_pin9_io, pmodoledrgb_out_pin9_o, pmodoledrgb_out_pin9_t; 
wire 				pmodoledrgb_out_pin10_i, pmodoledrgb_out_pin10_io, pmodoledrgb_out_pin10_o, pmodoledrgb_out_pin10_t;

// RGB LED 
wire                w_RGB1_Red, w_RGB1_Blue, w_RGB1_Green;
wire    [31:0]      led_out;

// LED pins 
wire    [15:0]      led_int;                // Nexys4IO drives these outputs
wire                clk_out1;
wire    [5:0]       db_btns;
wire    [15:0]      db_sw;
wire                sec1_int;

reg                 sec1_interrupt;
reg     [31:0]      counter = 31'd0;

// make the connections to the GPIO port.  
// Wraps the buttons, switches, and rotary encoder to an AXI GPIO.  For this project
// the AXI GPIO is used to generate an interrupt whenever any of its inputs change.
assign gpio_in = {6'b00000,rotary_press,rotary_sw,rotary_a,rotary_b,db_sw,db_btns};

// Drive the leds from the signal generated by the microblaze 
assign led = led_int;                   // LEDs are driven by led

// make the connections
// system-wide signals
assign sysclk = clk;
assign sysreset_n = btnCpuReset;		// The CPU reset pushbutton is asserted low.  The other pushbuttons are asserted high
										// but the microblaze for Nexys 4 expects reset to be asserted low
assign sysreset = ~sysreset_n;			// Generate a reset signal that is asserted high for any logic blocks expecting it.

// Not using JA so set all outputs to 0
assign JA = 8'b0000_0000;

// make connections to H-Bridge IP
// assign JB[4] = direction_pin;
assign JB[0] = direction_pin;
// assign JB[5] = enable_pin;
assign JB[1] = enable_pin;
// assign hall_sensor_value = JC[0];
// assign JB[0] = hall_sensor_value;
assign hall_sensor_value_a = JB[2];
assign hall_sensor_value_b = JB[3];

// JC is connected to the PMOD OLED
assign JC[0] = pmodoledrgb_out_pin1_io;
assign JC[1] = pmodoledrgb_out_pin2_io;
assign JC[2] = pmodoledrgb_out_pin3_io;
assign JC[3] = pmodoledrgb_out_pin4_io;
assign JC[4] = pmodoledrgb_out_pin7_io;
assign JC[5] = pmodoledrgb_out_pin8_io;
assign JC[6] = pmodoledrgb_out_pin9_io;
assign JC[7] = pmodoledrgb_out_pin10_io;

// PmodENC signals
// JD - bottom row only
// Pins are assigned such that turning the knob to the right
// causes the rotary count to increment.
assign rotary_a = JD[5];
assign rotary_b = JD[4];
assign rotary_press = JD[6];
assign rotary_sw = JD[7];
assign sec1_int = sec1_interrupt;
    
// instantiate the embedded system
embsys EMBSYS
       (// PMOD OLED pins
        .PmodOLEDrgb_out_pin10_i(pmodoledrgb_out_pin10_i),
       .PmodOLEDrgb_out_pin10_o(pmodoledrgb_out_pin10_o),
       .PmodOLEDrgb_out_pin10_t(pmodoledrgb_out_pin10_t),
       .PmodOLEDrgb_out_pin1_i(pmodoledrgb_out_pin1_i),
       .PmodOLEDrgb_out_pin1_o(pmodoledrgb_out_pin1_o),
       .PmodOLEDrgb_out_pin1_t(pmodoledrgb_out_pin1_t),
       .PmodOLEDrgb_out_pin2_i(pmodoledrgb_out_pin2_i),
       .PmodOLEDrgb_out_pin2_o(pmodoledrgb_out_pin2_o),
       .PmodOLEDrgb_out_pin2_t(pmodoledrgb_out_pin2_t),
       .PmodOLEDrgb_out_pin3_i(pmodoledrgb_out_pin3_i),
       .PmodOLEDrgb_out_pin3_o(pmodoledrgb_out_pin3_o),
       .PmodOLEDrgb_out_pin3_t(pmodoledrgb_out_pin3_t),
       .PmodOLEDrgb_out_pin4_i(pmodoledrgb_out_pin4_i),
       .PmodOLEDrgb_out_pin4_o(pmodoledrgb_out_pin4_o),
       .PmodOLEDrgb_out_pin4_t(pmodoledrgb_out_pin4_t),
       .PmodOLEDrgb_out_pin7_i(pmodoledrgb_out_pin7_i),
       .PmodOLEDrgb_out_pin7_o(pmodoledrgb_out_pin7_o),
       .PmodOLEDrgb_out_pin7_t(pmodoledrgb_out_pin7_t),
       .PmodOLEDrgb_out_pin8_i(pmodoledrgb_out_pin8_i),
       .PmodOLEDrgb_out_pin8_o(pmodoledrgb_out_pin8_o),
       .PmodOLEDrgb_out_pin8_t(pmodoledrgb_out_pin8_t),
       .PmodOLEDrgb_out_pin9_i(pmodoledrgb_out_pin9_i),
       .PmodOLEDrgb_out_pin9_o(pmodoledrgb_out_pin9_o),
       .PmodOLEDrgb_out_pin9_t(pmodoledrgb_out_pin9_t),
        
	    // Pmod Rotary Encoder
	    .pmodENC_A(rotary_a),
        .pmodENC_B(rotary_b),
        .pmodENC_btn(rotary_press),
        .pmodENC_sw(rotary_sw),
        // RGB1/2 Led's 
        .RGB1_Blue(RGB1_Blue),
        .RGB1_Green(RGB1_Green),
        .RGB1_Red(RGB1_Red),
        .RGB2_Blue(RGB2_Blue),
        .RGB2_Green(RGB2_Green),
        .RGB2_Red(RGB2_Red),

        // Seven Segment Display anode control  
        .an(an),
        .dp(dp),
        .led(led_int),
        .seg(seg),
		
        // Push buttons and switches  
        .btnC(btnC),
        .btnD(btnD),
        .btnL(btnL),
        .btnR(btnR),
        .btnU(btnU),
        .sw(sw),
        
        // HB3 motor controls, port names changed
        // .direction_pin(direction_pin),
        .motor_direction_out(direction_pin),
        // .enable_pin(enable_pin),
        .motor_enable_out(enable_pin),
        // .hall_sensor_value(hall_sensor_value),
        .motor_sensor_input_a(hall_sensor_value_a),
        .motor_sensor_input_b(hall_sensor_value_b),
		
        // reset and clock 
        .sysreset_n(sysreset_n),
        .sysclk(sysclk),
        .sec1_int(sec1_int),
          // GPIO pins 
        .gpio_0_GPIO_tri_i(gpio_in),
        .clk_100(clk_out1),
		
        // UART pins 
        .uart_rtl_rxd(uart_rtl_rxd),
        .uart_rtl_txd(uart_rtl_txd));
        
 //instantiate the debounce module
//debounce_btns_switches, SKB: Renamed to debounce
debounce
    #(
        .RESET_POLARITY_LOW(1)
    )      DB
    (
        .clk(clk_out1),    
        .pbtn_in({btnC,btnU,btnD,btnL,btnR,btnCpuReset}),
        .switch_in(sw),
        .pbtn_db(db_btns),
        .swtch_db(db_sw)
    );    
 
// implement a 1HZ counter to be used as an interrupt source 
always @(posedge clk_out1)
begin
       counter <= counter + 1;
         sec1_interrupt <= 0;
    if (counter == 32'd100_000_000)
        begin
            sec1_interrupt <= 1;
            counter <= 0;
        end
end    

// Tristate buffers for the pmodOLEDrgb pins
// generated by PMOD bridge component.  Many
// of these signals are not tri-state.
IOBUF pmodoledrgb_out_pin1_iobuf
(
    .I(pmodoledrgb_out_pin1_o),
    .IO(pmodoledrgb_out_pin1_io),
    .O(pmodoledrgb_out_pin1_i),
    .T(pmodoledrgb_out_pin1_t)
);

IOBUF pmodoledrgb_out_pin2_iobuf
(
    .I(pmodoledrgb_out_pin2_o),
    .IO(pmodoledrgb_out_pin2_io),
    .O(pmodoledrgb_out_pin2_i),
    .T(pmodoledrgb_out_pin2_t)
);

IOBUF pmodoledrgb_out_pin3_iobuf
(
    .I(pmodoledrgb_out_pin3_o),
    .IO(pmodoledrgb_out_pin3_io),
    .O(pmodoledrgb_out_pin3_i),
    .T(pmodoledrgb_out_pin3_t)
);

IOBUF pmodoledrgb_out_pin4_iobuf
(
    .I(pmodoledrgb_out_pin4_o),
    .IO(pmodoledrgb_out_pin4_io),
    .O(pmodoledrgb_out_pin4_i),
    .T(pmodoledrgb_out_pin4_t)
);

IOBUF pmodoledrgb_out_pin7_iobuf
(
    .I(pmodoledrgb_out_pin7_o),
    .IO(pmodoledrgb_out_pin7_io),
    .O(pmodoledrgb_out_pin7_i),
    .T(pmodoledrgb_out_pin7_t)
);

IOBUF pmodoledrgb_out_pin8_iobuf
(
    .I(pmodoledrgb_out_pin8_o),
    .IO(pmodoledrgb_out_pin8_io),
    .O(pmodoledrgb_out_pin8_i),
    .T(pmodoledrgb_out_pin8_t)
);

IOBUF pmodoledrgb_out_pin9_iobuf
(
    .I(pmodoledrgb_out_pin9_o),
    .IO(pmodoledrgb_out_pin9_io),
    .O(pmodoledrgb_out_pin9_i),
    .T(pmodoledrgb_out_pin9_t)
);

IOBUF pmodoledrgb_out_pin10_iobuf
(
    .I(pmodoledrgb_out_pin10_o),
    .IO(pmodoledrgb_out_pin10_io),
    .O(pmodoledrgb_out_pin10_i),
    .T(pmodoledrgb_out_pin10_t)
);       
        
endmodule
